const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const Country = require('../models/Country');

const generateSummaryImage = async () => {
    try {
        const topCountries = await Country.findAll({ sort: 'gdp_desc' });
        const top5 = topCountries.slice(0, 5);
        
        const metadata = await Country.getMetadata();
        const totalCountries = metadata ? metadata.total_countries : 0;
        const lastRefreshed = metadata ? new Date(metadata.last_refreshed_at).toLocaleString() : 'Never';
        
        const svg = `
            <svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
                <!-- Background gradient -->
                <defs>
                    <linearGradient id="grad" x1="0%" y1="0%" x2="0%" y2="100%">
                        <stop offset="0%" style="stop-color:#1e3a8a;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#3b82f6;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <rect width="800" height="600" fill="url(#grad)"/>
                
                <!-- Title -->
                <text x="400" y="60" font-family="Arial" font-size="36" font-weight="bold" fill="#ffffff" text-anchor="middle">
                    Country Details Summary
                </text>
                
                <!-- Total countries -->
                <text x="400" y="110" font-family="Arial" font-size="24" font-weight="bold" fill="#ffffff" text-anchor="middle">
                    Total Countries: ${totalCountries}
                </text>
                
                <!-- Last refreshed -->
                <text x="400" y="145" font-family="Arial" font-size="18" fill="#e0e7ff" text-anchor="middle">
                    Last Refreshed: ${lastRefreshed}
                </text>
                
                <!-- Top 5 header -->
                <text x="400" y="200" font-family="Arial" font-size="28" font-weight="bold" fill="#ffffff" text-anchor="middle">
                    Top 5 Countries by GDP
                </text>
                
                <!-- Top 5 countries -->
                ${top5.map((country, index) => {
                    const yPos = 250 + (index * 70);
                    const rank = index + 1;
                    const gdp = country.estimated_gdp ? `$${(country.estimated_gdp / 1e9).toFixed(2)}B` : 'N/A';
                    
                    return `
                        <!-- Rank ${rank} -->
                        <circle cx="80" cy="${yPos}" r="20" fill="#fbbf24"/>
                        <text x="80" y="${yPos + 6}" font-family="Arial" font-size="18" font-weight="bold" fill="#1e3a8a" text-anchor="middle">
                            ${rank}
                        </text>
                        <text x="120" y="${yPos + 5}" font-family="Arial" font-size="22" font-weight="bold" fill="#ffffff">
                            ${country.name}
                        </text>
                        <text x="120" y="${yPos + 30}" font-family="Arial" font-size="18" fill="#e0e7ff">
                            GDP: ${gdp}
                        </text>
                    `;
                }).join('')}
                
                <!-- Footer -->
                <text x="400" y="570" font-family="Arial" font-size="16" fill="#e0e7ff" text-anchor="middle">
                    Generated by Country Details API
                </text>
            </svg>
        `;
        
        // Save image
        const cachePath = path.join(__dirname, '../../cache');
        if (!fs.existsSync(cachePath)) {
            fs.mkdirSync(cachePath, { recursive: true });
        }
        
        const imagePath = path.join(cachePath, 'summary.png');
        
        await sharp(Buffer.from(svg))
            .png()
            .toFile(imagePath);

        return imagePath;
        
    } catch (error) {
        throw new Error("Failed to generate summary image: " + error.message);
    }
};

module.exports = {
    generateSummaryImage
};